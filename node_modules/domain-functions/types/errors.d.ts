import { z } from 'zod';
import type { ErrorWithMessage, SchemaError, ErrorResult, ErrorData, AtLeastOne } from './types.js';
declare function toErrorWithMessage(maybeError: unknown): ErrorWithMessage;
declare function schemaError(message: string, path: string): SchemaError;
declare function errorMessagesFor(errors: SchemaError[], name: string): string[];
declare type NestedErrors<SchemaType> = {
    [Property in keyof SchemaType]: string[] | NestedErrors<SchemaType[Property]>;
};
declare function errorMessagesForSchema<T extends z.ZodTypeAny>(errors: SchemaError[], _schema: T): NestedErrors<z.infer<T>>;
declare class InputError extends Error {
    path: string;
    constructor(message: string, path: string);
}
declare class InputErrors extends Error {
    errors: {
        message: string;
        path: string;
    }[];
    constructor(errors: {
        message: string;
        path: string;
    }[]);
}
declare class EnvironmentError extends Error {
    path: string;
    constructor(message: string, path: string);
}
declare class ResultError extends Error {
    result: ErrorResult;
    constructor(result: AtLeastOne<ErrorData>);
}
export { errorMessagesFor, errorMessagesForSchema, schemaError, toErrorWithMessage, InputError, EnvironmentError, InputErrors, ResultError, };
