{"version":3,"file":"index.js.map","sources":["src/amend/index.js","src/isbot/index.js","src/index.js"],"sourcesContent":["/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n"],"names":["amend","list","RegExp","test","error","forEach","search","replace","index","lastIndexOf","splice","flags","Isbot","patterns","slice","isbot","ua","Object","defineProperties","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","value","assign","bind","get","Boolean","match","filter","entry","exclude","matches","filters","push","apply","rule","map","toLowerCase","length","join","indexOf"],"mappings":"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"}